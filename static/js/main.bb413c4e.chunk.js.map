{"version":3,"sources":["logo.svg","components/monsterCard/MonsterCard.js","components/monsterList/MonsterList.js","components/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["MonsterCard","props","className","src","monster","id","name","email","MonsterList","monsters","map","SearchBox","onChange","e","onInputHandle","class","type","placeholder","Component","App","setState","searchValue","target","value","state","fetch","then","respone","json","users","this","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAAe,I,wBCEFA,EAAc,SAACC,GACxB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,YCJjBC,EAAc,SAACP,GACxB,OACI,qBAAKC,UAAU,YAAf,SACID,EAAMQ,SAASC,KAAI,SAACN,GAChB,OAAO,cAAC,EAAD,CAA8BA,QAASA,GAArBA,EAAQC,UCIlCM,G,kKAPX,WAAS,IAAD,OACJ,OACI,uBAAOC,SAAU,SAACC,GAAK,EAAKZ,MAAMa,cAAcD,IAAKE,MAAM,aAAaC,KAAK,OAAOC,YAAY,wB,GAJpFC,cCiCTC,E,kDA5Bb,WAAYlB,GAAO,IAAD,8BAChB,cAAMA,IAURa,cAAgB,SAACD,GACf,EAAKO,SAAS,CAACC,YAAYR,EAAES,OAAOC,SAVpC,EAAKC,MAAQ,CACXf,SAAU,GAAIY,YAAY,IAHZ,E,qDAMlB,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,oBAK1C,WACE,MAAgCC,KAAKN,MAA9Bf,EAAP,EAAOA,SAAUY,EAAjB,EAAiBA,YAEjB,OACE,sBAAKnB,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWY,cAAiBgB,KAAKhB,gBACjC,cAAC,EAAD,CAAaL,SAAYA,EAASsB,QAAO,SAAA3B,GAAO,OAAGA,EAAQE,KAAK0B,cAAcC,SAASZ,e,GAtB7EH,aCMHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bb413c4e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport \"./MonsterCard.css\";\r\nexport const MonsterCard = (props)=>{\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport './MonsterList.css';\r\nimport {MonsterCard} from \"../monsterCard/MonsterCard\";\r\nexport const MonsterList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">{\r\n            props.monsters.map((monster) => {\r\n                return <MonsterCard key={monster.id} monster={monster}/>\r\n            })\r\n\r\n        }</div>\r\n    )\r\n};","import React, {Component} from 'react';\r\nimport './SearchBox.css';\r\nclass SearchBox extends Component{\r\n    \r\n    render(){\r\n        return(\r\n            <input onChange={(e)=>{this.props.onInputHandle(e)}} class=\"search-box\" type=\"text\" placeholder=\"search monsters\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport {MonsterList} from './components/monsterList/MonsterList';\nimport SearchBox from './components/SearchBox';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      monsters: [], searchValue:''\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(respone => respone.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  onInputHandle = (e)=>{\n    this.setState({searchValue:e.target.value});\n  }\n  render(){\n    const {monsters, searchValue} = this.state;\n\n    return(\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox onInputHandle = {this.onInputHandle}/>\n        <MonsterList monsters = {monsters.filter(monster=> monster.name.toLowerCase().includes(searchValue))}/>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}